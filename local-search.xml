<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>控制之美</title>
    <link href="/2023/10/28/%E6%8E%A7%E5%88%B6%E4%B9%8B%E7%BE%8E/"/>
    <url>/2023/10/28/%E6%8E%A7%E5%88%B6%E4%B9%8B%E7%BE%8E/</url>
    
    <content type="html"><![CDATA[<p>本文主要目的是记录控制理论相关内容，利用费曼学习法高效掌握知识。</p><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="动态系统"><a href="#动态系统" class="headerlink" title="动态系统"></a>动态系统</h3><p>控制理论的研究对象是<strong>动态系统(Dynamic System)<strong>。<br>动态系统是指状态随着</strong>时间</strong>变化的系统，其特点是系统的变量是关于时间的函数。给动态系统一个输入，会获得一个输出。以在光滑平面上的小车为例，给小车施加一个随着时间变化的外力f(t),小车发生位移x(t)，这就是一个动态系统。根据牛顿第二定律F&#x3D;ma可以得到:<br>$$<br>f(t)&#x3D;m \frac{d^2 x(t)}{d t^2}<br>$$<br>其中，定义外力f(t)为系统的输入(Input),小车位移为系统的输出(Output)。</p><p>现阶段的学习主要研究线性时不变系统(lieanr time invariant system)</p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>控制理论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Goodbye to goodbye</title>
    <link href="/2023/10/17/Goodbye-to-goodbye/"/>
    <url>/2023/10/17/Goodbye-to-goodbye/</url>
    
    <content type="html"><![CDATA[<p>大约一年之前，大二的时候的学术英语老师是Lori。她人很好，总爱夸我们，期末考试也给了我相当高的分数。<br><img src="/2023/10/17/Goodbye-to-goodbye/lori.png" alt="1"></p><style>    img[alt="lori"]{        width:400px;    }</style><p>事实上我们班英语比我厉害的同学有很多，我也没有经常和她互动。依稀记得最后见她的那天，因为疫情的原因，我们在各自的家里开着视频会议进行discussion(算是口语考试)。结束的时候有些感慨，有些舍不得。但没办法，有些人只能陪你走很短暂的一段路，能遇见就已经很幸运了。<br>我从没想过会再见到她，更从来没想过她会记得我。</p><p>由于疫情结束政策放开，英国老师陆续来到了哈尔滨。所以，意外地，今天我们又见面了。只是短短的一面，只是简单的say hi，say goodbye。我却回味了整整一个下午。<br>也许是因为缺爱，也许是因为天生敏感，这种不抱任何期望却被记住的感觉令我感到很温暖。所以写了点东西（暂且称它为小诗吧）来记录这种美好。</p><p><img src="/2023/10/17/Goodbye-to-goodbye/bye.png" alt="2"></p><style>    img[alt="bye"]{        width:400px;    }</style><p>一期一会，感谢相遇。</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>平凡周记01</title>
    <link href="/2023/09/13/%E5%B9%B3%E5%87%A1%E5%91%A8%E8%AE%B001/"/>
    <url>/2023/09/13/%E5%B9%B3%E5%87%A1%E5%91%A8%E8%AE%B001/</url>
    
    <content type="html"><![CDATA[<h2 id="01-9-13-WED"><a href="#01-9-13-WED" class="headerlink" title="01 9.13 WED"></a>01 9.13 WED</h2><p>记录一下今天看好哥们答辩让我挺感动的细节吧。<br>我的这位朋友，我认为他身上最大的优点就是有侠气。就是那种平时吊儿郎当跟一群兄弟逃课打游戏鬼混，见面打招呼一个中指，或者“傻逼”、“bro”。但关键时候找他帮个忙办点事儿，他绝不含糊还真能给你办成了的那种人。他口无遮拦，活的很真。想骂你就骂你，觉得你傻逼是真的，觉得你好也是真的。我喜欢和这种人做朋友，不累，自在。</p><span id="more"></span> <p>今天下午他要竞选学生会主席团候选人，他是第十四个。下边坐着的除了其他的竞选者，基本上都是他的朋友了。我们等了两个小时就为了看他“胡侃”五分钟，这小子也挺牛的，可以让这些人为他付出时间，且心甘情愿。<br><img src="/2023/09/13/%E5%B9%B3%E5%87%A1%E5%91%A8%E8%AE%B001/1.jpeg" alt="穿上西装这小子还挺帅"></p><style>    img[alt="穿上西装这小子还挺帅"]{        width:400px;    }</style> <p>当然他的女朋友也在。她给他准备了一大束花，藏着掖着就怕被他发现，我们俩鬼鬼祟祟好不容易才把这束花运下来。他答辩的时候，他女朋友比他还紧张，讲到最后她在下面一脸自豪，激动的跳起来猛竖大拇指。<br><img src="/2023/09/13/%E5%B9%B3%E5%87%A1%E5%91%A8%E8%AE%B001/2.jpeg" alt="2"></p><style>    img[alt="2"]{        width:400px;    }</style> <p>我又想到之前在英国时，他一提起“香菜”（他女朋友的名字），脸上也流露出这种骄傲的表情。这种“提起你嘴角不自觉的上扬”的笑容真真切切的让我感到很温暖。他们俩让我觉得身边还有真实的活着的人，还有爱。<br>就以一个局外人的视角写这么多吧。真心的祝他们一直好。以及祝他竞选成功。<br><img src="/2023/09/13/%E5%B9%B3%E5%87%A1%E5%91%A8%E8%AE%B001/3.jpeg" alt="3"></p><style>    img[alt="3"]{        width:400px;    }</style> <p>ps:个人觉得他的答辩是我看到的人当中最好的一个。没有滤镜，非常客观。</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>只爱陌生人</title>
    <link href="/2023/09/13/%E5%8F%AA%E7%88%B1%E9%99%8C%E7%94%9F%E4%BA%BA/"/>
    <url>/2023/09/13/%E5%8F%AA%E7%88%B1%E9%99%8C%E7%94%9F%E4%BA%BA/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录我的第二次国赛</title>
    <link href="/2023/09/07/%E8%AE%B0%E5%BD%95%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9B%BD%E8%B5%9B/"/>
    <url>/2023/09/07/%E8%AE%B0%E5%BD%95%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9B%BD%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="day1"><a href="#day1" class="headerlink" title="day1:  "></a>day1:  </h2><p>上次国赛自己什么也不会，甚至不知道“建模”、“算法”…是什么。最后靠着强大的队友和上天的眷顾拿了省一。这次自己学了点东西，准备大展身手，结果感冒加重了，晚上和队友讨论选题时头痛欲裂、涕泗横流。希望明天赶快好起来，不想成为拖油瓶，还是有执念，还是不想说自己不行。  </p><h2 id="day2"><a href="#day2" class="headerlink" title="day2: "></a>day2: </h2><p>今天大家都有课，只有晚上才有时间聚在一起解题。做到第二问的时候，明明是高中的立体几何题，却怎么也想不明白。深感自己空间想象能力弱的不行。十点半跑回宿舍洗澡，洗澡的时候在脑海里“画画”，继续想啊想，感觉自己已经走火入魔了。  </p><span id="more"></span><p>ps：昨天晚上梦到了高中时喜欢了三年的男生，早上起来翻了翻他以前的朋友圈，还是和三年前一样的沙雕。发现自己还是很喜欢他。可能高中毕业之后我们就永远不会再见面了，但是他的存在总会让我感受到美好，一想到他心情就会变好。  </p><h2 id="day3"><a href="#day3" class="headerlink" title="day3:"></a>day3:</h2><p>每年国赛的传统就是在做后一天晚上三个人一起熬一个通宵，其实没必要熬，但是就是想感受一下一群人在一起为了同一个目标而努力的氛围。<br>七点钟的时候摸鱼看了新闻联播，因为这一期报道了习大大来我们学校！虽然没有见到习大大，我也不觉得我们学校有多厉害，但是在新闻联播里看到再熟悉不过的校园，听到习大大嘴里说出“哈工程”三个字，我还是会心潮澎湃，为学校感到骄傲。<br><img src="/2023/09/07/%E8%AE%B0%E5%BD%95%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9B%BD%E8%B5%9B/1.jpeg" alt="1"></p><style>    img[alt="1"]{        width:400px;    }</style>  <p>短暂的摸鱼过后一口气做到了大约凌晨一点多，这时候外面传来大一新生军训归来的歌声。上大学三年一直有一个遗憾，就是没有正经的军训一次。没有感受到半夜被起床号叫醒，立刻换好衣服跑到楼下集合的那种紧张刺激感。<br><img src="/2023/09/07/%E8%AE%B0%E5%BD%95%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9B%BD%E8%B5%9B/2.jpeg" alt="2"></p><style>    img[alt="2"]{        width:400px;    }</style><p>后来和某猪下楼出校觅食。她说她闻到了榨菜的味道，疯狂地想吃榨菜。然而哈尔滨根本没有夜生活，说好的24小时便利店店门紧锁。马路上空空荡荡，我开心地在马路中间蹦起来。唯一“营业”的，只有那家闪着诡异的死亡粉色灯光的“无人售货”店。作为一位有探索精神的人，我当然要去看看了！于是有了下面的这段视频：（还没研究好怎么插入视频，先留个位置）<br>我们走过了整条街也没有发现营业的便利店，最后在网吧里买了一些零食。当然，网吧里没有榨菜。老板无奈地说他开的是网吧不是仓买。可能我们两个是唯一半夜进网吧不打游戏只买零食的顾客吧。<br><img src="/2023/09/07/%E8%AE%B0%E5%BD%95%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9B%BD%E8%B5%9B/3.jpeg" alt="3"></p><style>    img[alt="3"]{        width:400px;    }</style><h2 id="day4"><a href="#day4" class="headerlink" title="day4:"></a>day4:</h2><p>熬到了第二天早上，肚子饿的不行，三个人去食堂吃了早饭。熬夜过后吃上一碗热气腾腾的方便面，真的很幸福。<br><img src="/2023/09/07/%E8%AE%B0%E5%BD%95%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9B%BD%E8%B5%9B/4.jpeg" alt="4"></p><style>    img[alt="4"]{        width:400px;    }</style><p>回去之后强打起精神，一口气做到11点钟，最后不断的修改、导出、修改、导出。至此，我的国赛之旅结束了。<br>回到寝室立刻倒在床上睡死过去，本来想着睡一个小时去上体育课，结果一睁眼体育课已经快结束了……  </p><h2 id="写在最后："><a href="#写在最后：" class="headerlink" title="写在最后："></a>写在最后：</h2><p>这篇博客并没有记录赛题，因为根本不是我现在能解出的题目（我们的论文是怎么写的可想而知）。许多年以后，我不会记得当年比赛的题目是什么，但我想我会记得三个人在一起努力的那种氛围，凌晨出校门的兴奋，以及通宵过后精神恍惚，发誓下次再也不参加这个“破比赛”了，结果下一次还是会骂骂咧咧的参加的那种热忱。</p><h2 id="最后的最后，感谢我的两个队友给了我一段美好的回忆。"><a href="#最后的最后，感谢我的两个队友给了我一段美好的回忆。" class="headerlink" title="最后的最后，感谢我的两个队友给了我一段美好的回忆。"></a>最后的最后，感谢我的两个队友给了我一段美好的回忆。</h2>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>平凡日记 01</title>
    <link href="/2023/09/04/01-%E8%AE%B0%E5%BD%95%E6%99%AE%E9%80%9A%E7%9A%84%E4%B8%80%E5%A4%A9/"/>
    <url>/2023/09/04/01-%E8%AE%B0%E5%BD%95%E6%99%AE%E9%80%9A%E7%9A%84%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<p>不知道为什么今天晚上特别累，整个人处于一种茫然的状态。感觉度过了很漫长的一天，其实每天都很漫长。<br>今天早上六点钟就起床了，因为要赶在大一新生军训之前跑完两公里。至于为什么要早上起来跑步，因为早上跑完步后我的大脑异常活跃，会让上午的状态特别好。另一个原因就是空腹有氧减肥。<br>已经连续好几天早上跑步遇到同一个女生，她每次都是上身长袖，下身红色AJ短裤，脑袋上罩一个白色的头戴式耳机。她也许是和我一样有执念的人吧，在这样一个清冷的阴雨天的早晨也要坚持。<br>我很喜欢像这样和陌生人产生奇妙的连接。我们从来没有和对方说过话，但几乎每天都会在同一时刻、同一地点心照不宣的做着同样的事情。我们好像是彼此生命中的NPC，之间不会发生任何故事。但如果有一天我没有看到她，我想我会有些失落吧。  </p><span id="more"></span>  <p>今天只有一节早八，上完课浏览了一会儿mathor的博客，这又是属于我和陌生人的特殊连接，写下这篇日记可能也是因为他的原因吧（这个以后会细说）。中午陪某人去取修好的手机，最近身边好多人的手机都坏掉，开始担心起自己的。然后在外面吃了点简餐。<br><img src="/2023/09/04/01-%E8%AE%B0%E5%BD%95%E6%99%AE%E9%80%9A%E7%9A%84%E4%B8%80%E5%A4%A9/1.png" alt="1"></p><style>    img[alt="1"]{        width:400px;    }</style><p>顺便试了一下瑞幸和茅台联名的“酱香拿铁”。出乎意料的好喝。<br><img src="/2023/09/04/01-%E8%AE%B0%E5%BD%95%E6%99%AE%E9%80%9A%E7%9A%84%E4%B8%80%E5%A4%A9/2.png" alt="2"></p><style>    img[alt="2"]{        width:400px;    }</style><p>回学校之后先去了快递站给两位”互联网soulmate”寄了从英国带回来的小礼物，和昨天晚上写的信。我很享真实的纸和笔摩擦产生的温度，现在写信也成了我生活中仅剩的一点点浪漫吧。<br><img src="/2023/09/04/01-%E8%AE%B0%E5%BD%95%E6%99%AE%E9%80%9A%E7%9A%84%E4%B8%80%E5%A4%A9/3.png" alt="3"></p><style>    img[alt="3"]{        width:400px;    }</style><p><img src="/2023/09/04/01-%E8%AE%B0%E5%BD%95%E6%99%AE%E9%80%9A%E7%9A%84%E4%B8%80%E5%A4%A9/4.png" alt="4"> </p><style>    img[alt="4"]{        width:400px;    }</style> <p>想提高自己的编程能力，下午沉浸的学习了几个小时的python，因为对基础的递归函数都不能快速的掌握而开始对自己生气。<br>还是后悔高中为什么没有好好念书，也许考上北邮我现在每天就可以心安理得的做自己喜欢的事情了吧。<br>学到大脑已经麻木无法再继续下去了便回宿舍洗澡，洗澡的时候脑袋里想很多事情，闪过成千上万个念头，但我却无法将它们都捕捉。仅存的几个写成了这篇平凡日记，写的时候不断感慨自己语言的匮乏，以及我的生活原来由这么多的小细节组成，没有人能进入我脑中窥探他们。<br>有些东西只属于我自己。</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python-递归函数</title>
    <link href="/2023/09/04/Python-%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/"/>
    <url>/2023/09/04/Python-%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>如果在一个函数内部调用函数本身，这个函数就是递归函数。<br>举个简单例子，计算阶乘(factorial) n! &#x3D; 1 * 2 * 3 * … * n<br>我们定义函数fact(n) </p><pre><code class="hljs">fact(n)= n! = 1 * 2 * 3 * ... * n-1 * n = (n - 1)! * n   = fact(n-1) * n</code></pre><p>我们发现fact(n)可以用fact(n-1) \times n来表示<br>因此，fact(n)用递归的方式写出来就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fact</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> n * fact(n-<span class="hljs-number">1</span>) <br></code></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p><strong>通过递归函数实现汉诺塔的移动</strong><br><code>汉诺塔（Tower of Hanoi），又称河内塔，是一个源于印度古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</code></p><p>请编写move(n, a, b, c)函数，它接收参数n，表示3个柱子A、B、C中第1个柱子A的盘子数量，然后打印出把所有盘子从A借助B移动到C的方法，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">n, a, b, c</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;move&#x27;</span>, a, <span class="hljs-string">&#x27;--&gt;&#x27;</span>, c)<br><br><span class="hljs-comment"># 期待输出:</span><br><span class="hljs-comment"># A --&gt; C</span><br><span class="hljs-comment"># A --&gt; B</span><br><span class="hljs-comment"># C --&gt; B</span><br><span class="hljs-comment"># A --&gt; C</span><br><span class="hljs-comment"># B --&gt; A</span><br><span class="hljs-comment"># B --&gt; C</span><br><span class="hljs-comment"># A --&gt; C</span><br>move(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>)<br></code></pre></td></tr></table></figure><p>参考源码(当时绞尽脑汁也没想出来)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">n, a, b, c</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;move&#x27;</span>, a, <span class="hljs-string">&#x27;--&gt;&#x27;</span>, c)<br>    <span class="hljs-keyword">else</span>:<br>        move(n-<span class="hljs-number">1</span>, a, c, b)<br>        move(<span class="hljs-number">1</span>, a, b, c)<br>        move(n-<span class="hljs-number">1</span>, b, a, c)<br><br>move(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">move A --&gt; Cmove A --&gt; Bmove C --&gt; Bmove A --&gt; Cmove B --&gt; Amove B --&gt; Cmove A --&gt; C</code></pre><p>一个评论点醒了我：”不用管别的东西, 只关心n和n-1之间怎么递推, 和极限情况下怎么运行, 再合起来就行了。” 于是问题变得和把大象装进冰箱里一样简单，一共只有三步：<br>1.把(n-1)个盘子从A移动到B<br>2.把最下面的盘子从A移动到C<br>3.最后把B上的(n-1)个盘子移动到C<br>问题解决😃  </p><hr><p>今天在做切片练习的时候发现一道和递归函数完美结合的题，记录在这里。</p><p><code>利用切片操作，实现一个trim()函数，去除字符串首尾的空格</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">trim</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">if</span> s[:<span class="hljs-number">1</span>] != <span class="hljs-string">&quot; &quot;</span> <span class="hljs-keyword">and</span> s[-<span class="hljs-number">1</span>:] != <span class="hljs-string">&quot; &quot;</span>:<br>        <span class="hljs-keyword">return</span> s<br>    <span class="hljs-keyword">elif</span> s[:<span class="hljs-number">1</span>]== <span class="hljs-string">&quot; &quot;</span>:<br>        <span class="hljs-keyword">return</span> trim(s[<span class="hljs-number">1</span>:])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> trim(s[:-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">trim(<span class="hljs-string">&quot;   hello&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">&#39;hello&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">trim(<span class="hljs-string">&quot;hello world &quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">&#39;hello world&#39;</code></pre><p>太妙了有没有！</p>]]></content>
    
    
    <categories>
      
      <category>AIHER</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k近邻算法python实现</title>
    <link href="/2023/09/02/k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95python%E5%AE%9E%E7%8E%B0/"/>
    <url>/2023/09/02/k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95python%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="k近邻算法的Python实现"><a href="#k近邻算法的Python实现" class="headerlink" title="k近邻算法的Python实现"></a>k近邻算法的Python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#1.构建数据集</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dataset = &#123;<span class="hljs-string">&#x27;电影名称&#x27;</span>:[<span class="hljs-string">&#x27;Titanic&#x27;</span>,<span class="hljs-string">&#x27;Flipped&#x27;</span>,<span class="hljs-string">&#x27;Love Letter&#x27;</span>,<span class="hljs-string">&#x27;Kill Bill&#x27;</span>,<span class="hljs-string">&#x27;The Dark Knight Rises&#x27;</span>,<span class="hljs-string">&#x27;The Rock&#x27;</span>],<br>           <span class="hljs-string">&#x27;打斗镜头&#x27;</span>:[<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">112</span>,<span class="hljs-number">100</span>,<span class="hljs-number">98</span>],<br>           <span class="hljs-string">&#x27;接吻镜头&#x27;</span>:[<span class="hljs-number">101</span>,<span class="hljs-number">99</span>,<span class="hljs-number">105</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>],<br>           <span class="hljs-string">&#x27;电影类型&#x27;</span>:[<span class="hljs-string">&#x27;爱情片&#x27;</span>,<span class="hljs-string">&#x27;爱情片&#x27;</span>,<span class="hljs-string">&#x27;爱情片&#x27;</span>,<span class="hljs-string">&#x27;动作片&#x27;</span>,<span class="hljs-string">&#x27;动作片&#x27;</span>,<span class="hljs-string">&#x27;动作片&#x27;</span>]&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">movie_data = pd.DataFrame(dataset) <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">movie_data<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>电影名称</th>      <th>打斗镜头</th>      <th>接吻镜头</th>      <th>电影类型</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Titanic</td>      <td>3</td>      <td>101</td>      <td>爱情片</td>    </tr>    <tr>      <th>1</th>      <td>Flipped</td>      <td>1</td>      <td>99</td>      <td>爱情片</td>    </tr>    <tr>      <th>2</th>      <td>Love Letter</td>      <td>2</td>      <td>105</td>      <td>爱情片</td>    </tr>    <tr>      <th>3</th>      <td>Kill Bill</td>      <td>112</td>      <td>3</td>      <td>动作片</td>    </tr>    <tr>      <th>4</th>      <td>The Dark Knight Rises</td>      <td>100</td>      <td>4</td>      <td>动作片</td>    </tr>    <tr>      <th>5</th>      <td>The Rock</td>      <td>98</td>      <td>2</td>      <td>动作片</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#2.计算未知电影和已知电影数据集中的点之间的距离</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">new_data = [<span class="hljs-number">13</span>,<span class="hljs-number">77</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">dist = <span class="hljs-built_in">list</span> ((((movie_data.iloc[:<span class="hljs-number">6</span>,<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]-new_data)**<span class="hljs-number">2</span>).<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>))**<span class="hljs-number">0.5</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">(((movie_data.iloc[:<span class="hljs-number">6</span>,<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]-new_data)**<span class="hljs-number">2</span>).<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>))**<span class="hljs-number">0.5</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">0     26.0000001     25.0599282     30.0832183    123.6001624    113.5693625    113.357840dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> ((((movie_data.iloc[:<span class="hljs-number">6</span>,<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]-new_data)**<span class="hljs-number">2</span>).<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>))**<span class="hljs-number">0.5</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">[26.0, 25.059928172283335, 30.083217912982647, 123.60016181219181, 113.56936206565572, 113.35784048754634]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">dist<br></code></pre></td></tr></table></figure><pre><code class="hljs">[26.0, 25.059928172283335, 30.083217912982647, 123.60016181219181, 113.56936206565572, 113.35784048754634]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#对距离升序排列，并选取距离最小的k个点</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">dist_label = pd.DataFrame(&#123;<span class="hljs-string">&#x27;dist&#x27;</span>:dist, <span class="hljs-string">&#x27;labels&#x27;</span>:(movie_data.iloc[:<span class="hljs-number">6</span>,<span class="hljs-number">3</span>])&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">(movie_data.iloc[:<span class="hljs-number">6</span>,<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><pre><code class="hljs">0    爱情片1    爱情片2    爱情片3    动作片4    动作片5    动作片Name: 电影类型, dtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">dist_label<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>dist</th>      <th>labels</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>26.000000</td>      <td>爱情片</td>    </tr>    <tr>      <th>1</th>      <td>25.059928</td>      <td>爱情片</td>    </tr>    <tr>      <th>2</th>      <td>30.083218</td>      <td>爱情片</td>    </tr>    <tr>      <th>3</th>      <td>123.600162</td>      <td>动作片</td>    </tr>    <tr>      <th>4</th>      <td>113.569362</td>      <td>动作片</td>    </tr>    <tr>      <th>5</th>      <td>113.357840</td>      <td>动作片</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">k = <span class="hljs-number">4</span><br>rank = dist_label.sort_values(by = <span class="hljs-string">&#x27;dist&#x27;</span>)[: k]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">rank<br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code class="hljs">.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>dist</th>      <th>labels</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>25.059928</td>      <td>爱情片</td>    </tr>    <tr>      <th>0</th>      <td>26.000000</td>      <td>爱情片</td>    </tr>    <tr>      <th>2</th>      <td>30.083218</td>      <td>爱情片</td>    </tr>    <tr>      <th>5</th>      <td>113.357840</td>      <td>动作片</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#确定k个点所属类别分别出现的频率</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">f = rank.loc[:,<span class="hljs-string">&#x27;labels&#x27;</span>].value_counts() <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">f<br></code></pre></td></tr></table></figure><pre><code class="hljs">爱情片    3动作片    1Name: labels, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">f.index[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><pre><code class="hljs">&#39;爱情片&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#5.选择频率最高的类别作为预测类别</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">result = []<br>result.append(f.index[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">result<br></code></pre></td></tr></table></figure><pre><code class="hljs">[&#39;爱情片&#39;]</code></pre><h3 id="2-封装函数"><a href="#2-封装函数" class="headerlink" title="2.封装函数"></a>2.封装函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-string">&quot;&quot;&quot;&quot;&quot;</span><br><span class="hljs-string">函数功能：用kNN算法对未知数据类型进行分类</span><br><span class="hljs-string">参数说明：</span><br><span class="hljs-string">    inX:未知分类的数据集</span><br><span class="hljs-string">    dataSet0:已知分类标签的数据集（训练集）</span><br><span class="hljs-string">    k:k近邻算法参数，选择距离最小的k个点</span><br><span class="hljs-string">返回:</span><br><span class="hljs-string">    result:分类结果</span><br><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">classify0</span>(<span class="hljs-params">inX,dataSet0,k</span>):<br>    <br>    result = []<br>    <br>    dist = <span class="hljs-built_in">list</span> ((((movie_data.iloc[:<span class="hljs-number">6</span>,<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]-new_data)**<span class="hljs-number">2</span>).<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>))**<span class="hljs-number">0.5</span>) <span class="hljs-comment">#计算未知电影和已知电影数据集中的点之间的距离</span><br>    dist_label = pd.DataFrame(&#123;<span class="hljs-string">&#x27;dist&#x27;</span>:dist, <span class="hljs-string">&#x27;labels&#x27;</span>:(movie_data.iloc[:<span class="hljs-number">6</span>,<span class="hljs-number">3</span>])&#125;) <span class="hljs-comment">#把每个距离分别对应上标签</span><br>    rank = dist_label.sort_values(by = <span class="hljs-string">&#x27;dist&#x27;</span>)[: k] <span class="hljs-comment">#对距离进行排序</span><br>    f = rank.loc[:,<span class="hljs-string">&#x27;labels&#x27;</span>].value_counts() <span class="hljs-comment">#选择频率最高的类别作为预测类别</span><br>    result.append(f.index[<span class="hljs-number">0</span>])<br>    <br>    <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#测试运行结果</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">inX = [<span class="hljs-number">122</span>,<span class="hljs-number">50</span>]<br>dataSet0 = movie_data<br>k = <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">classify0(inX,dataSet0,k)<br></code></pre></td></tr></table></figure><pre><code class="hljs">[&#39;爱情片&#39;]</code></pre>]]></content>
    
    
    <categories>
      
      <category>AIHER</category>
      
      <category>Machine Learning</category>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>machine learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01 McDonald&#39;s for a week</title>
    <link href="/2023/08/28/McDonald-s-for-a-week/"/>
    <url>/2023/08/28/McDonald-s-for-a-week/</url>
    
    <content type="html"><![CDATA[<p>📝记录连续七天吃麦当劳穷鬼套餐，别问我为什么要做这么无聊的实验。<br>就是很无聊。</p><span id="more"></span><p>day1:双吉(不加番茄酱、芥末酱版)+香芋派（晚餐）<br>一次尝试不加任何酱的双吉，意外的不错。<br><img src="/2023/08/28/McDonald-s-for-a-week/day1.png" alt="day1"></p><style>    img[alt="day1"]{        width:400px;    }</style><p>day2:粤式烧腊<br>没想到第二天就失败了。。。<br>下大雨，下课冒雨走到了主楼，实在是走不下去了。只好跑回食堂，在潮湿的空气中吃了粤式烧腊。<br>不过明天还是要继续！</p><p>day3:双吉（不加番茄酱版）+香芋派<br>今天的肉饼巨咸。不过怎么油光闪闪的哈哈。<br><img src="/2023/08/28/McDonald-s-for-a-week/day3.png" alt="day3"></p><style>    img[alt="day3"]{        width:400px;    }</style><p>day4:双吉(不加番茄酱、芥末酱版)+香芋派<br>感觉什么酱都不加的版本最好吃！牛肉和芝士的味道特别香。<br><img src="/2023/08/28/McDonald-s-for-a-week/day4.png" alt="day4"></p><style>    img[alt="day4"]{        width:400px;    }</style><p>day5:双吉(纯享版)+锡兰红茶<br>受不了了！想吃菜！！！<br><img src="/2023/08/28/McDonald-s-for-a-week/day5.png" alt="day5"></p><style>    img[alt="day5"]{        width:400px;    }</style><p>day6:酥酥多笋卷+菠萝派<br>双吉吃腻了换成了多笋卷，好吃😋就是份量有点小。感觉还可以继续一周😋<br><img src="/2023/08/28/McDonald-s-for-a-week/day6.png" alt="day6"></p><style>    img[alt="day6"]{        width:400px;    }</style><p>day7:跟某人去吃劈叉饼了🍕  </p><p>总结：还好因为这样那样的原因没有真的连续吃七天，要不然也许我会从此讨厌双吉。<br>纯享版双吉和多笋卷真的好吃！</p>]]></content>
    
    
    <categories>
      
      <category>boring lab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>boring lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k近邻算法</title>
    <link href="/2023/08/28/k%E4%B8%B4%E8%BF%91%E7%AE%97%E6%B3%95/"/>
    <url>/2023/08/28/k%E4%B8%B4%E8%BF%91%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>本文介绍机器学习的一个算法：KNN(K-Nearest Neighbor)k-近邻算法。<br>本文将提到：1.KNN算法的基本理论;  2.使用python实现KNN算法;  3.使用KNN算法处理简单的实际任务。</p><span id="more"></span><h2 id="KNN算法简介"><a href="#KNN算法简介" class="headerlink" title="KNN算法简介"></a>KNN算法简介</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>通俗地说，KNN算法的指导思想就是“近朱者赤，近墨者黑”，即由和你临近的人来判断你的类别。<br>简单地说，KNN算法采用测量不同特征值之间的距离方法来进行分类。它的工作原理是：存在一个样本数据集合（训练样本集），并且样本集中每个数据都存在标签（即都有所属分类）。当我们输入一个未知样本后，将未知样本的每一个特征与原有样本集的对应特征进行比较，计算位置样本与所有已知样本的距离。从中选取与未知样本距离最近的K个已知样本，并将未知样本与K个最邻近已知样本占比较多的标签归为一类。这就是K近邻算法中K的出处。需要注意的是，通常k是不大于20的整数。</p><h3 id="实例——电影分类（动作片or爱情片？）"><a href="#实例——电影分类（动作片or爱情片？）" class="headerlink" title="实例——电影分类（动作片or爱情片？）"></a>实例——电影分类（动作片or爱情片？）</h3><p>下面我们来通过电影分类的例子来帮助大家更好的理解KNN算法的工作原理。</p><p>要想通过KNN算法实现爱情片和动作片的区分，首要的任务是明确 <strong>”某一类型的电影有哪些独有的特征，使其明显区别于其他类型的电影？“</strong>。这些特征必须要可以被量化，即有对应的数值。这些数值将作为KNN算法的数据来源。</p><p>不难总结出，动作片中经常出现打斗场景，而爱情片中经常出现亲吻场景。当然，动作片中也会存在接吻镜头，爱情片中也可能存在打斗场景，我们不能单纯依靠是否存在打斗或亲吻来判断影片类型。但是动作片中的打斗次数更频繁，而爱情片中的亲吻次数更多。因此，可以基于<strong>某种场景在某部电影中出现的次数</strong>来进行电影分类。<br>如下图所示，我们收集了6部电影的打斗和亲吻次数。<br><img src="/2023/08/28/k%E4%B8%B4%E8%BF%91%E7%AE%97%E6%B3%95/1.png"><br>首先我们需要知未知电影中打斗和亲吻镜头的次数。上图中问号位置代表该未知电影，具体数字见下表：</p><table><thead><tr><th>电影名称</th><th>打斗镜头</th><th>亲吻镜头</th><th>电影类型</th></tr></thead><tbody><tr><td>California Man</td><td>3</td><td>104</td><td>爱情片</td></tr><tr><td>He’s Not Really into Dudes</td><td>2</td><td>100</td><td>爱情片</td></tr><tr><td>Beautiful Woman</td><td>1</td><td>81</td><td>爱情片</td></tr><tr><td>Kevin Longblade</td><td>101</td><td>10</td><td>动作片</td></tr><tr><td>Robo Slayer 3000</td><td>99</td><td>5</td><td>动作片</td></tr><tr><td>Amped ll</td><td>98</td><td>2</td><td>动作片</td></tr><tr><td>?</td><td>18</td><td>90</td><td>未知</td></tr></tbody></table><p>然后我们计算未知电影与样本集合中其他电影的距离。（此处暂时不要考虑如何计算得到距离，后面会详细讲述。</p><p>表1  已知电影与未知电影的距离</p><table><thead><tr><th>电影名称</th><th>与未知电影的距离</th></tr></thead><tbody><tr><td>California Man</td><td>20.5</td></tr><tr><td>He’s Not Really into Dudes</td><td>18.7</td></tr><tr><td>Beautiful Woman</td><td>19.2</td></tr><tr><td>Kevin Longblade</td><td>115.3</td></tr><tr><td>Robo Slayer 3000</td><td>117.4</td></tr><tr><td>Amped ll</td><td>118.9</td></tr></tbody></table><p>现在我们得到了样本集中所有电影与未知电影的距离，可以找到k个距离最近的电影。假定k&#x3D;3, 则最靠近的三个电影类型是:<em>He’s Not Really into Dudes</em>,<em>Beautiful Woman</em>,<em>California Man</em>. 这三部电影全是爱情片，因此我们判定未知电影是爱情片。</p><h3 id="补充介绍如何计算距离"><a href="#补充介绍如何计算距离" class="headerlink" title="补充介绍如何计算距离"></a>补充介绍如何计算距离</h3><p>一般采用欧氏距离公式:<br><img src="/2023/08/28/k%E4%B8%B4%E8%BF%91%E7%AE%97%E6%B3%95/2.png"></p><p>n维特征空间欧氏距离计算公式:<br><img src="/2023/08/28/k%E4%B8%B4%E8%BF%91%E7%AE%97%E6%B3%95/3.png"></p>]]></content>
    
    
    <categories>
      
      <category>AIHER</category>
      
      <category>Machine Learning</category>
      
      <category>exercise</category>
      
    </categories>
    
    
    <tags>
      
      <tag>machine learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>世界在下沉，爱将我托起</title>
    <link href="/2023/04/07/%E4%B8%96%E7%95%8C%E5%9C%A8%E4%B8%8B%E6%B2%89%EF%BC%8C%E7%88%B1%E5%B0%86%E6%88%91%E6%89%98%E8%B5%B7/"/>
    <url>/2023/04/07/%E4%B8%96%E7%95%8C%E5%9C%A8%E4%B8%8B%E6%B2%89%EF%BC%8C%E7%88%B1%E5%B0%86%E6%88%91%E6%89%98%E8%B5%B7/</url>
    
    <content type="html"><![CDATA[<p>世界在下沉，爱将我托起<br>                ——《泰坦尼克号》观影记录</p><p>这部影片讲述了太多的东西，阶级、人性、责任、生死、爱情……前几个题目太过于宏大，我讲不好。所以在这里，我只讲爱。</p><span id="more"></span><p>我坚信爱是可以救赎的。从Rose遇见Jack的那一刻起，一个被囚禁在上流社会的灵魂便被另一个飘荡在底层社会的灵魂救赎。不考虑身份背景，不考虑旁人眼光，不考虑现实枷锁，不考虑未来。爱就这样发生了。在一个浪漫的夜晚，在两人轻快的舞步中，在下等舱自由的音乐里。到底是怎样的爱可以让她变得勇敢，不顾一切地逃离；让她一次又一次地放弃上船的机会，无论如何都要和他在一起；让她在没有他的世界里遵守她对他的承诺，精彩地活下去。<br><img src="/2023/04/07/%E4%B8%96%E7%95%8C%E5%9C%A8%E4%B8%8B%E6%B2%89%EF%BC%8C%E7%88%B1%E5%B0%86%E6%88%91%E6%89%98%E8%B5%B7/1.jpg" alt="image"><br>我相信爱是很有力量的。说一些比较私密的东西吧。高三那年，我经历了人生巨大的变故，我不知道自己是怎样撑过那段时光的，每天只是麻木、恍惚、觉得世界好不真实。过了两年回头再看那段时光，原来是那个人给予的爱让我继续下去。虽然这份爱现在已经不在了，但每当回想起它还是会感叹：“哇，当时真的很美好哇。”，还是可以从中获得一种温暖的力量。在那之前我从来都不相信所谓“爱的力量”，觉得很俗套，但经历过一些事情之后才明白，爱就是有力量，就是如此神奇。<br>所以啊，还是要有爱的，还是要渴望爱的。无论爱物还是爱人，爱抽象还是爱具体，总要抓住点什么，不顾一切的去爱。</p><p>  d<br>  2023.4.7<br>  16:28PM</p>]]></content>
    
    
    <categories>
      
      <category>书影音</category>
      
    </categories>
    
    
    <tags>
      
      <tag>film</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>All About D</title>
    <link href="/2023/04/06/All-About-D/"/>
    <url>/2023/04/06/All-About-D/</url>
    
    <content type="html"><![CDATA[<p>d喜欢黑夜。<br>一到夜晚，脑袋里就长出了一只笔，在脑海里不停地写字，浪漫的、荒谬的，密密麻麻的。晚上七点钟的时候d心血来潮，翻出了几年未用过的咖啡机煮了一壶咖啡。<br>怪不得今晚脑海里的字格外的多。</p><p>d写不出任何一个。因为它们挤在一起，扭成一团，像杂乱的黑线纠缠不清。<br>可d却知道那只笔是银色的，上面刻着古老而神秘的花纹。</p><p>脑中的字还在纠缠。d浏览着独立书店的网页来等待它们停止。<br>无意间发现两本书。<br>《变成星星的五分钟》，《指向月亮的手》</p><span id="more"></span><p>唔……星星…月亮… d很自然地就想到了那个人，遥远的、无法触摸的。<br>d马上就要和那个人见面了，在一个浪漫的夜晚。<br>d想把它们送给那个人，还有一封信。<br>d总爱把自己喜欢的东西送给自己喜欢的人，和一封信。</p><p>此时此刻d已经幻想出那个人看书的样子，安静的、沉稳的。<br>d甚至可以肯定他是在夜晚打开它们，旁边是一盏蜡烛，没有开灯。<br>就像d现在这样，看着烛光闪烁。<br>d明明知道他也许根本不会翻开。<br>他们也许根本不会再见面。<br>嗯……也许……</p><p>d还是买下了其中的一本。<br>d发觉脑中的文字渐渐消散了，在他变成星星的这五分钟里。<br>d觉得离他的月亮更近了一些。</p><p>“嗨，我心爱的日记本，你知道吗？我们都爱星星！”<br>“这些句子只是一个开始，是指向月亮的手。”</p><h2 id="d2022-12-171-53-AM"><a href="#d2022-12-171-53-AM" class="headerlink" title="d2022.12.171:53 AM"></a>d<br>2022.12.17<br>1:53 AM</h2><p>这篇写于决定见Yico的那晚，因为咖啡因过量开始胡思乱想。<br>就作为这个博客的第一篇吧。</p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>呓语</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
